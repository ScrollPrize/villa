name: Build & Push Docker Image (ghcr.io)

on:
  push:
    branches: ["main", "latest"]
    paths:
      - 'volume-cartographer/**'
      - '.github/workflows/vc3d-publish-ghcr.yml'

concurrency: docker

env:
  REGISTRY_IMAGE: ghcr.io/${{ github.repository_owner }}/volume-cartographer

jobs:
  prepare:
    name: Preparation
    runs-on: ubuntu-latest
    outputs:
      registry_image_lc: ${{ steps.lowercase.outputs.registry_image_lc }}
    steps:
      - name: Convert image name to lower-case
        id: lowercase
        run: |
          echo "registry_image_lc=$(echo '${{ env.REGISTRY_IMAGE }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

  build_x64:
    name: Build & Push Image (amd64)
    runs-on: ubuntu-24.04
    needs: prepare
    env:
      REGISTRY_IMAGE_LC: ${{ needs.prepare.outputs.registry_image_lc }}
    steps:
      - name: Derive helper env vars
        run: |
          platform=linux/amd64
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta (labels only)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE_LC }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=edge,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'latest') }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push (by digest only)
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ubuntu-24.04-noble.Dockerfile
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=${{ env.REGISTRY_IMAGE_LC }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  build_arm64:
    name: Build & Push Image (arm64)
    runs-on: ubuntu-24.04-arm
    needs: prepare
    env:
      REGISTRY_IMAGE_LC: ${{ needs.prepare.outputs.registry_image_lc }}
    steps:
      - name: Derive helper env vars
        run: |
          platform=linux/arm64
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta (labels only)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE_LC }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-
            type=raw,value=edge,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'latest') }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push (by digest only)
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ubuntu-24.04-noble.Dockerfile
          platforms: linux/arm64
          labels: ${{ steps.meta.outputs.labels }}
          outputs: |
            type=image,name=${{ env.REGISTRY_IMAGE_LC }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    name: Merge & Publish Multi-Platform Image
    runs-on: ubuntu-latest
    needs: [prepare, build_x64, build_arm64]
    env:
      REGISTRY_IMAGE: ${{ needs.prepare.outputs.registry_image_lc }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (manifest tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            # branch pushes (dev-next, latest â€¦)
            type=ref,event=branch
            # pull-request workflows
            type=ref,event=pr
            # optional extras
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=edge,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'latest') }}

      - name: Create manifest list & push tags
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect resulting image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
