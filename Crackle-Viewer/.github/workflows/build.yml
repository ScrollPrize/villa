name: Build Application

permissions:
  contents: write
  actions: write
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write
  
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-16.04, macos-10.15, windows-2019]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install PyInstaller and Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    - name: Build with PyInstaller
      run: |
        pyinstaller crackle_viewer.spec
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-Executable
        path: dist/*
    - name: Create or Update Release
      id: create_release
      uses: actions/github-script@v5
      with:
        script: |
          const release = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: 'latest-release'
          }).catch(() => null);
          
          if (release) {
            console.log(`Updating release: ${release.data.id}`);
            const updatedRelease = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              tag_name: 'latest-release',
              name: 'Latest Release',
              draft: false,
              prerelease: false
            });
            return updatedRelease.data.upload_url;
          } else {
            console.log('Creating new release');
            const newRelease = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'latest-release',
              name: 'Latest Release',
              draft: false,
              prerelease: false
            });
            return newRelease.data.upload_url;
          }
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs }}
        asset_path: ./dist/${{ matrix.os }}-Executable.zip
        asset_name: ${{ matrix.os }}.zip
        asset_content_type: application/zip
